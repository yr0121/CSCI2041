Yuanhao Ruan ID:ruanx054
andl - CALL BY VALUE
	andl (true::false::true::true::[])
   =foldl and true (true::false::true::true::[])
   =foldl and (and true true) (false::true::true::[])
   =foldl and true (false::true::true::[])
   =foldl and (and true false) (true::true::[])
   =foldl and false (true::true::[])
   =foldl and (and false true) (true::[])
   =foldl and false (true::[])
   =foldl and (and false true) []
   =foldl and false []
   =false
 
andl - CALL BY NAME
 	andl (true::false::true::true::[])
  =foldl and true (true::false::true::true::[])
  =foldl and (and true true) (false::true::true::[])
  =foldl and (and (and true true) false) (true::true::[])
  =foldl and (and (and (and true true) false) true) (true::[])
  =foldl and (and (and (and (and true true) false) true) true) []
  =and (and (and (and true true) false) true) true
  =and (and (and true false) true) true
  =and (and (false true)) true
  =and false true
  =false

andr - CALL BY VALUE
 	andr (true::false::true::true::[])
   =foldr and (true::false::true::true::[]) true
   =and true (foldr and (false::true::true::[]) true)
   =and true (and false (foldr and (true::true::[]) true)
   =and true (and false (and true (foldr and (true::[]) true))
   =and true (and false (and true (and true (foldr and [] true))))
   =and true (and false (and true true))
   =and true (and false true)
   =and true false
   =false

andr - CALL BY NAME 
	andr (true::false::true::true::[])
   =foldr and (true::false::true::true::[]) true
   =and true (foldr and (false::true::true::[]) true)
   =foldr and (false::true::true::[]) true
   =and false (foldr and (true::true::[]) true)
   =false

(*We don't consider lazy evaluation for this question because lazy evaluation always use a name to substitute repeated expression during the process of evaluation and evaluate them
when necessary. However, in this question, using a substitution name is 
not efficient because most part of this question is dealing with values instead of expressions. Therefore, we do not use lazy evaluation here*)

(*The call by name of andr is the most efficient evaluation.
andr l = foldr and l true and 
foldr f [] v = v
foldr f (x::xs) v = f x (foldr f xs v)
we can see that when input is empty list, it immediately return a result
and then the input list is x::xs, it can still produce the result immediately
if f produce a result, then we do not need to evaluate the part after f so it is 
the most efficient evaluation)